user root;

worker_processes  1;

events { worker_connections 1024; }

error_log /dev/stderr error;

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    keepalive_timeout 65;

    # cache data
    lua_shared_dict domains 10m;  # domain -> pool
    lua_shared_dict pools   10m;  # pool:<name> -> json(backends[]), rr:<name> -> counter

    # load domains + pools saat worker start
    init_worker_by_lua_file /etc/nginx/lua/domain_loader.lua;

    # ===== Port 80 (Default) =====
    server {
        listen 80 default_server;
        server_name _ localhost;

        # ACME webroot (HTTP only)
        location ^~ /.well-known/acme-challenge/ {
            access_log /var/log/nginx/access.log combined;
            root /var/www/certbot;
            allow all;
            try_files $uri =404;
        }

        # API (Flask)
        location /api/ {
            proxy_pass http://127.0.0.1:5000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Router HTTP dinamis (domain apapun)
        location / {
            set $upstream "";
            access_by_lua_file /etc/nginx/lua/router.lua;
            proxy_pass http://$upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # (opsional) timeout
            proxy_connect_timeout 5s;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
        }
    }

    # ===== Port 80 untuk *.isipage.com (opsional) =====
    server {
        listen 80;
        server_name ~^(?<subdomain>.+)\.isipage\.com$;

        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
            try_files $uri =404;
        }

        # Bisa redirect ke HTTPS, atau tetap proxy ke pool tertentu
        # return 301 https://$host$request_uri;

        # contoh: arahkan semua *.isipage.com ke pool_fe
        location / {
            set $upstream "";
            # paksa gunakan pool_fe jika belum ada mapping khusus
            access_by_lua_block {
                local dict = ngx.shared.pools
                local json = require "cjson.safe"
                local poolname = "pool_fe"
                local backends_json = dict:get("pool:" .. poolname)
                if not backends_json then
                  ngx.log(ngx.ERR, "Pool '" .. poolname .. "' not found")
                  return ngx.exit(502)
                end
                local backends = json.decode(backends_json) or {}
                if #backends == 0 then
                  ngx.log(ngx.ERR, "Pool '" .. poolname .. "' empty")
                  return ngx.exit(502)
                end
                local ckey = "rr:" .. poolname
                local n = #backends
                local idx = dict:incr(ckey, 1, 0)
                local pick = backends[( (idx - 1) % n ) + 1]
                ngx.var.upstream = (pick.host or "127.0.0.1") .. ":" .. tostring(pick.port or 80)
            }
            proxy_pass http://$upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # ===== Port 443 untuk *.isipage.com (SSL statis yang sudah kamu punya) =====
    server {
        listen 443 ssl;
        http2 on;
        server_name ~^(?<subdomain>.+)\.isipage\.com$;

        ssl_certificate     /etc/nginx/ssl/isipage.crt;
        ssl_certificate_key /etc/nginx/ssl/isipage.key;

        location / {
            set $upstream "";
            access_by_lua_block {
                local dict = ngx.shared.pools
                local json = require "cjson.safe"
                local poolname = "pool_fe"
                local backends_json = dict:get("pool:" .. poolname)
                if not backends_json then
                  ngx.log(ngx.ERR, "Pool '" .. poolname .. "' not found")
                  return ngx.exit(502)
                end
                local backends = json.decode(backends_json) or {}
                if #backends == 0 then
                  ngx.log(ngx.ERR, "Pool '" .. poolname .. "' empty")
                  return ngx.exit(502)
                end
                local ckey = "rr:" .. poolname
                local n = #backends
                local idx = dict:incr(ckey, 1, 0)
                local pick = backends[( (idx - 1) % n ) + 1]
                ngx.var.upstream = (pick.host or "127.0.0.1") .. ":" .. tostring(pick.port or 80)
            }
            proxy_pass http://$upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # ===== Port 443 Dinamis untuk domain lain (LE webroot + SNI dynamic) =====
    server {
        listen 443 ssl default_server;
        http2 on;
        server_name _;  # tangkap selain *.isipage.com

        # fallback dummy cert; real cert via SNI dinamis
        ssl_certificate     /etc/nginx/ssl/dummy.crt;
        ssl_certificate_key /etc/nginx/ssl/dummy.key;

        ssl_certificate_by_lua_block {
            local ssl = require("ngx.ssl")
            local domain = ssl.server_name()
            if not domain or domain == "" then
                ngx.log(ngx.WARN, "No SNI; using dummy cert")
                return
            end
            local cert_path = "/var/lib/certbot/live/" .. domain .. "/fullchain.pem"
            local key_path  = "/var/lib/certbot/live/" .. domain .. "/privkey.pem"

            local fc = io.open(cert_path, "r")
            local fk = io.open(key_path, "r")
            if not fc or not fk then
                ngx.log(ngx.WARN, "SSL not found for " .. domain .. "; using dummy cert")
                return
            end

            local cert = fc:read("*a"); if fc then fc:close() end
            local key  = fk:read("*a"); if fk then fk:close() end

            assert(ssl.clear_certs())
            assert(ssl.set_der_cert(ssl.cert_pem_to_der(cert)))
            assert(ssl.set_der_priv_key(ssl.priv_key_pem_to_der(key)))
        }

        location / {
            set $upstream "";
            access_by_lua_file /etc/nginx/lua/router.lua;
            proxy_pass http://$upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
