# # Optional: Upstream pool fallback
# upstream astro_pool {
#     least_conn;
#     server 103.250.11.31:4321;
#     server 103.250.11.32:4321;
# }

# # Handle HTTP â†’ redirect to HTTPS
# server {
#     listen 80 default_server;
#     server_name _;
    
#     location /.well-known/acme-challenge/ {
#         content_by_lua_block {
#             auto_ssl:challenge_server()
#         }
#     }

#     location / {
#         return 301 https://$host$request_uri;
#     }
# }

# # Handle HTTPS with dynamic backend from domain_map.lua
# server {
#     listen 443 ssl default_server;
#     server_name _;

#     # AutoSSL setup
#     ssl_certificate_by_lua_block {
#         auto_ssl:ssl_certificate()
#     }

#     # ssl_certificate     /etc/nginx/dummy.crt;
#     # ssl_certificate_key /etc/nginx/dummy.key;

#     access_by_lua_block {
#         local map = require("domain_map")

#         -- ambil backend dari map (table atau Redis atau lainnya)
#         local backend = map[ngx.var.host]

#         if not backend then
#             -- fallback ke astro_pool jika domain tidak ditemukan
#             ngx.var.proxy_target = "http://astro_pool"
#         else
#             ngx.var.proxy_target = backend
#         end
#     }

#     location / {
#         proxy_pass $proxy_target;
#         proxy_http_version 1.1;
#         proxy_set_header Host              $host;
#         proxy_set_header X-Real-IP         $remote_addr;
#         proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }
